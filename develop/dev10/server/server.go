package server

import (
	"io"
	"log"
	"net"
)

// StartTCP запускает TCP сервер, который принимает входящие соединения
// и эхо-отвечает на них (отправляет полученные данные обратно клиенту).
func StartTCP() {
	// Определяем адрес и порт, на которых сервер будет слушать входящие подключения.
	addr := "localhost:8080"

	// Создаем TCP слушатель на указанном адресе и порту.
	server, err := net.Listen("tcp", addr)
	if err != nil {
		// Логируем ошибку и завершаем работу сервера, если не удалось создать слушатель.
		log.Fatalln("Failed to start server:", err)
	}
	// Обеспечиваем закрытие слушателя при завершении работы функции.
	defer server.Close()

	// Логируем сообщение о запуске сервера.
	log.Println("Server is running on:", addr)

	// Запускаем бесконечный цикл для принятия входящих соединений.
	for {
		// Принимаем входящее соединение.
		conn, err := server.Accept()
		if err != nil {
			// Логируем ошибку, если не удалось принять соединение.
			log.Println("Failed to accept connection:", err)
			continue
		}

		// Запускаем горутину для обработки принятого соединения.
		go func(conn net.Conn) {
			// Обеспечиваем закрытие соединения при завершении работы горутины.
			defer func() {
				conn.Close()
			}()

			// Копируем данные из соединения обратно в это же соединение (эхо-отправка).
			// Это означает, что все данные, полученные от клиента, будут отправлены обратно клиенту.
			io.Copy(conn, conn)
		}(conn)
	}
}
